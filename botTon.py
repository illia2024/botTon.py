import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime, timedelta
import json
import os
import psutil
import asyncio

API_TOKEN = '7800722038:AAFHllfItmbgQXh_CmDUrBgfpQzDw7f-678'
ADMIN_ID = 8089612452  # –≤–∞—à ID –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤
DATA_FILE = 'bot_data.json'  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
bot_status = {
    'start_date': datetime.now(),
    'uptime': timedelta(),
    'memory_usage': 0,  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
    'active_users': 0,
    'groups': {}
}

# –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–µ–¥—ñ–∞
MEDIA_LIMITS = {
    'photo': 5,
    'video': 2
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def check_bot_uptime():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            last_start = datetime.fromisoformat(data.get('start_date'))
            if datetime.now() - last_start > timedelta(days=3):  # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 3 –¥—ñ–± –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
                return True
    return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ –ø–∞–º'—è—Ç—å
def update_memory_usage():
    memory = psutil.virtual_memory()
    bot_status['memory_usage'] = round(memory.used / (1024 ** 2), 2)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –±–∞–π—Ç–∏ –≤ MB

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({
            'start_date': bot_status['start_date'].isoformat(),
            'uptime': str(bot_status['uptime']),
            'memory_usage': bot_status['memory_usage'],
            'active_users': bot_status['active_users'],
            'groups': bot_status['groups']
        }, f)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def send_status_report():
    update_memory_usage()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º'—è—Ç—ñ
    uptime_str = str(bot_status['uptime']).split(".")[0]
    report = f"""
    BOT STATUS REPORT

    ‚è≥ –ê–ø—Ç–∞–π–º: {uptime_str}
    üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫—É: {bot_status['start_date'].strftime('%d.%m.%Y %H:%M')}
    üß† –ü–∞–º'—è—Ç—å: {bot_status['memory_usage']} MB
    üßÆ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤ —É –ë–î: {len(bot_status['groups'])}
    üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {bot_status['active_users']}

    üóÇ –ì—Ä—É–ø–∏ –ø—ñ–¥ –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º:
    """

    total_deleted = 0  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É

    for group_id, group_data in bot_status['groups'].items():
        group_report = f"""
        {group_data['name']} | ID: {group_id}
        - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ª—ñ–º—ñ—Ç—ñ: {group_data['user_limit']}
        - –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–±—Ä–æ–±–ª–µ–Ω–æ: {group_data['messages_processed']}
        - –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {group_data['deleted']['photo']} | –≤—ñ–¥–µ–æ: {group_data['deleted']['video']} | –ø–æ—Å–∏–ª–∞–Ω—å: {group_data['deleted']['links']} | —Å–ø–∞–º—É: {group_data['deleted']['spam']}
        """
        report += group_report
        total_deleted += sum(group_data['deleted'].values())

    report += f"""
    üîê –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø: {len(bot_status['groups'])}
    - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ª—ñ–º—ñ—Ç–∞–º–∏: {bot_status['active_users']}
    - –í—Å—å–æ–≥–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {total_deleted}

    üõ† –¢–µ—Ö–Ω—ñ—á–Ω–µ:
    - –í–µ—Ä—Å—ñ—è Python: 3.11.8
    - aiogram: 3.4.1
    - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Linux x86_64
    - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑: {str(bot_status['uptime']).split(".")[0]}
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤: –£–≤—ñ–º–∫–Ω–µ–Ω–æ

    ‚ö†Ô∏è –Ø–∫—â–æ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –±—ñ–ª—å—à–µ 3 –¥—ñ–± ‚Äî –∞–ø—Ç–∞–π–º –æ–±–Ω—É–ª—è—î—Ç—å—Å—è, –ª—ñ–º—ñ—Ç–∏ —Å–∫–∏–¥–∞—é—Ç—å—Å—è.
    """

    await bot.send_message(ADMIN_ID, report)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ–¥—ñ–∞ —Ç–∞ –æ–±–º–µ–∂–µ–Ω—å
async def check_media(message: types.Message):
    user_id = message.from_user.id
    media_type = None

    if message.photo:
        media_type = 'photo'
    elif message.video:
        media_type = 'video'

    if media_type:
        user_data = user_limits.get(user_id, {'photo': 0, 'video': 0, 'last_reset': datetime.now()})
        limit = MEDIA_LIMITS[media_type]
        
        if user_data[media_type] >= limit:
            await message.delete()
            await message.answer(f"üö´ –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –Ω–∞ {media_type}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            user_data[media_type] += 1
            if datetime.now() - user_data['last_reset'] > timedelta(days=1):
                user_data[media_type] = 0
                user_data['last_reset'] = datetime.now()
            user_limits[user_id] = user_data

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler(content_types=['text', 'photo', 'video', 'document', 'url'])
async def handle_message(message: types.Message):
    group_id = message.chat.id

    if group_id not in bot_status['groups']:
        bot_status['groups'][group_id] = {
            'name': message.chat.title,
            'user_limit': 5,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ª—ñ–º—ñ—Ç 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            'messages_processed': 0,
            'deleted': {'photo': 0, 'video': 0, 'links': 0, 'spam': 0}
        }

    group_data = bot_status['groups'][group_id]
    group_data['messages_processed'] += 1

    if message.text:
        if 'http' in message.text or 'www' in message.text:
            await message.delete()
            group_data['deleted']['links'] += 1
            save_data()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
            return

    await check_media(message)
    save_data()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['bot'])
async def bot_status(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await send_status_report()

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    # –Ø–∫—â–æ –±—ñ–ª—å—à–µ 3 –¥—ñ–± –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if check_bot_uptime():
        bot_status['start_date'] = datetime.now()
        bot_status['uptime'] = timedelta()

    save_data()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    executor.start_polling(dp, skip_updates=True
