from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters
import sqlite3
from datetime import datetime, timedelta
import psutil

TOKEN = '7028486555:AAHVY4yW4_NhWw10kxhol6tRR3l6pt1P15E'
ADMIN_ID = '1428115542'
DB_NAME = 'bot_database.db'


def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    add_user_to_db(user_id, username)
    
    keyboard = [
        [KeyboardButton("–ì–∞–º–∞–Ω–µ—Ü—å"), KeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")],
        [KeyboardButton("–ó—ñ–±—Ä–∞—Ç–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å, –∑–∞—Ä–æ–±–ª—è—Ç–∏ TON, –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –º–µ–Ω–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥ —É –º–µ–Ω—é.',
        reply_markup=reply_markup
    )

def wallet(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_info = get_user_info(user_id)
    if user_info:
        username, balance = user_info
        keyboard = [
            [InlineKeyboardButton("üì• –í–∏–≤–µ—Å—Ç–∏", callback_data='withdraw')],
            [InlineKeyboardButton("üî∂ –ó—ñ–±—Ä–∞—Ç–∏", callback_data='collect')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            f"üëõ –ì–∞–º–∞–Ω–µ—Ü—å\n\nüê≥ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\nüî∂ TON: {balance:.4f}",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def collect_ton(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    last_collected = get_last_collected_time(user_id)
    now = datetime.now()
    if last_collected is None or now - last_collected >= timedelta(hours=1):
        update_balance(user_id, 0.0001)
        update_last_collected_time(user_id, now)
        context.bot.send_message(chat_id=user_id, text="–í–∏ –∑—ñ–±—Ä–∞–ª–∏ 0.0001 TON.")
    else:
        context.bot.send_message(chat_id=user_id, text="–í–∏ –º–æ–∂–µ—Ç–µ –∑—ñ–±—Ä–∞—Ç–∏ TON –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É.")

def withdraw(update: Update, context: CallbackContext) -> None:
    context.bot.send_message(chat_id=update.callback_query.from_user.id, text="""
    –ü—Ä–∏–≤—ñ—Ç üòâ
    --> –î–ª—è —Ç–æ–≥–æ —â–æ–± –≤–∏–≤–µ—Å—Ç–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π /username 
    --> –ü–æ—Ç—ñ–º –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∞–¥—Ä–µ—Å Xrocket/Tonkeeper 
    --> –Ü –ø—Ä–æ—Ç—è–≥–æ–º –≤—ñ–¥ 2-10 –≥–æ–¥–∏–Ω –≤–∏–≤—ñ–¥ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à –≥–∞–º–∞–Ω–µ—Ü—å.
    """)

def information(update: Update, context: CallbackContext) -> None:
    user_count = get_user_count()
    bot_start_date = get_bot_start_date()
    days_active = (datetime.now() - bot_start_date).days
    keyboard = [[InlineKeyboardButton("–ù–æ–≤–∏–Ω–∏", url='https://t.me/nFarmTon')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î: {days_active} –¥–Ω—ñ–≤\nüîé –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}",
        reply_markup=reply_markup
    )

def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    if query.data == 'withdraw':
        withdraw(update, context)
    elif query.data == 'collect':
        collect_ton(update, context)
    elif query.data.startswith('block_'):
        block_user(update, context)
    elif query.data == 'broadcast':
        context.user_data['awaiting_broadcast'] = True
        context.bot.send_message(chat_id=query.from_user.id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
    elif query.data == 'transactions':
        view_transactions(update, context)
    elif query.data == 'ton_reward':
        context.user_data['awaiting_ton_reward'] = True
        context.bot.send_message(chat_id=query.from_user.id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É.")
    elif query.data == 'find_user':
        find_user(update, context)

def handle_message(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('awaiting_broadcast'):
        broadcast_message(update, context)
    elif context.user_data.get('awaiting_ton_reward'):
        handle_ton_reward(update, context)
    elif context.user_data.get('awaiting_user_id'):
        handle_user_search(update, context)
    else:
        text = update.message.text
        if text == "–ì–∞–º–∞–Ω–µ—Ü—å":
            wallet(update, context)
        elif text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            information(update, context)
        elif text == "–ó—ñ–±—Ä–∞—Ç–∏":
            collect_ton(update, context)
        else:
            update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é.")

def admin_panel(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if str(user_id) == ADMIN_ID:
        uptime = datetime.now() - get_bot_start_date()
        memory_usage = psutil.Process().memory_info().rss / 1024 ** 2  # MB
        keyboard = [
            [InlineKeyboardButton("üíå –†–æ–∑—Å–∏–ª–∫–∞", callback_data='broadcast')],
            [InlineKeyboardButton("‚ôªÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data='transactions')],
            [InlineKeyboardButton("üñáÔ∏è –ó–∞ TON", callback_data='ton_reward')],
            [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data='find_user')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=user_id, text=(
            f"üíª –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"__________________\n"
            f"‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞: {uptime}\n"
            f"üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞–º'—è—Ç—ñ: {memory_usage:.2f} MB\n"
        ), reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=user_id, text="–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

def broadcast_message(update: Update, context: CallbackContext) -> None:
    message = update.message.text
    user_ids = get_all_user_ids()
    for user_id in user_ids:
        context.bot.send_message(chat_id=user_id, text=message)
    update.message.reply_text("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    context.user_data['awaiting_broadcast'] = False

def handle_ton_reward(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('awaiting_ton_reward'):
        try:
            new_reward = float(update.message.text)
            context.user_data['ton_reward'] = new_reward
            update.message.reply_text(f"–ù–æ–≤–∞ –ø–ª–∞—Ç–∞ –∑–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_reward} TON.")
        except ValueError:
            update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ.")
        context.user_data['awaiting_ton_reward'] = False

def find_user(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if str(user_id) == ADMIN_ID:
        context.bot.send_message(chat_id=user_id, text="–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
        context.user_data['awaiting_user_id'] = True
    else:
        context.bot.send_message(chat_id=user_id, text="–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

def handle_user_search(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('awaiting_user_id'):
        try:
            search_user_id = int(update.message.text)
            user_info = get_user_info(search_user_id)
            if user_info:
                username, balance = user_info
                blocked = is_user_blocked(search_user_id)
                block_button_text = "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not blocked else "üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
                keyboard = [
                    [InlineKeyboardButton(block_button_text, callback_data=f'block_{search_user_id}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                update.message.reply_text(
                    f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {search_user_id}\n"
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
                    f"–ë–∞–ª–∞–Ω—Å: {balance:.4f} TON",
                    reply_markup=reply_markup
                )
            else:
                update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        except ValueError:
            update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ ID.")
        context.user_data['awaiting_user_id'] = False

def block_user(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    admin_id = query.from_user.id
    if str(admin_id) == ADMIN_ID:
        target_user_id = int(query.data.split('_')[1])
        blocked = is_user_blocked(target_user_id)
        if blocked:
            unblock_user(target_user_id)
            context.bot.send_message(chat_id=target_user_id, text="‚ö†Ô∏è –í–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ.")
            query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
        else:
            block_user_in_db(target_user_id)
            context.bot.send_message(chat_id=target_user_id, text="‚ö†Ô∏è –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ.")
            query.edit_message_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    else:
        query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

def view_transactions(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    if str(user_id) == ADMIN_ID:
        transactions = get_all_transactions()
        transactions_text = "\n".join(f"{t[0]}: {t[1]} TON to {t[2]}" for t in transactions)
        context.bot.send_message(chat_id=user_id, text=f"–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:\n{transactions_text}")
    else:
        context.bot.send_message(chat_id=user_id, text="–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def create_database():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 0,
        last_collected TIMESTAMP,
        blocked INTEGER DEFAULT 0
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        to_address TEXT,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()
    conn.close()

def add_user_to_db(user_id, username):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

def get_user_info(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT username, balance FROM users WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result

def update_balance(user_id, amount):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
    conn.commit()
    conn.close()

def get_last_collected_time(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT last_collected FROM users WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return datetime.fromisoformat(result[0]) if result and result[0] else None

def update_last_collected_time(user_id, time):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("UPDATE users SET last_collected = ? WHERE user_id=?", (time.isoformat(), user_id))
    conn.commit()
    conn.close()

def get_user_count():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users")
    count = c.fetchone()[0]
    conn.close()
    return count

def get_all_user_ids():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in c.fetchall()]
    conn.close()
    return user_ids

def get_bot_start_date():
    # Replace with the actual bot start date
    return datetime(2024, 5, 1)

def is_user_blocked(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT blocked FROM users WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] == 1 if result else False

def block_user_in_db(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("UPDATE users SET blocked = 1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def unblock_user(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("UPDATE users SET blocked = 0 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def get_all_transactions():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT user_id, amount, to_address FROM transactions ORDER BY timestamp DESC")
    transactions = c.fetchall()
    conn.close()
    return transactions

# –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥
def main():
    create_database()
    
    updater = Updater(TOKEN, use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin_panel))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main(
